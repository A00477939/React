{"ast":null,"code":"var _jsxFileName = \"/Users/hrithikarora/Documents/SMU/Assignment/FIRST/my-app/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport cold from '../image/cold.png';\nimport mild from '../image/mild.png';\nimport sunny from '../image/sunny.png';\nimport c from '../image/c.png';\nimport f from '../image/f.png';\nimport './Weather.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Weather = () => {\n  _s();\n  const [temperature, setTemperature] = useState(null);\n  const [ftemperature, setFtemperature] = useState(null);\n  const [weatherImage, setWeatherImage] = useState(null);\n  const [isTemperatureSelected, setIsTemperatureSelected] = useState(true); // Added state to track which temperature is selected\n\n  useEffect(() => {\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=Halifax,Canada&APPID=c70084a5e8a2058ce8a54ff0f61a4afe&units=metric').then(response => response.json()).then(data => {\n      const temp = data.main.temp;\n      setTemperature(temp);\n      const fTemp = temp * 1.8 + 32;\n      setFtemperature(fTemp);\n      if (temp < 10) {\n        setWeatherImage(cold);\n      } else if (temp > 10 && temp < 20) {\n        setWeatherImage(mild);\n      } else {\n        setWeatherImage(sunny);\n      }\n    });\n  }, []);\n  const handleImageClick = isTempSelected => {\n    setIsTemperatureSelected(isTempSelected);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: [weatherImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: weatherImage,\n      alt: \"Weather\",\n      className: \"weather-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 24\n    }, this), isTemperatureSelected ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"temperature\",\n      children: [temperature, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"temperature\",\n      children: [ftemperature, \"\\xB0F\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: c // You can use the same image as a button or use different images for toggling\n        ,\n        className: \"celsius-image\",\n        onClick: () => handleImageClick(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: f // You can use the same image as a button or use different images for toggling\n        ,\n        alt: \"Fahrenheit Temperature\",\n        onClick: () => handleImageClick(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"/XsPO2G+uq3XGyAvdrdT13TuQ2o=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","cold","mild","sunny","c","f","jsxDEV","_jsxDEV","Weather","_s","temperature","setTemperature","ftemperature","setFtemperature","weatherImage","setWeatherImage","isTemperatureSelected","setIsTemperatureSelected","fetch","then","response","json","data","temp","main","fTemp","handleImageClick","isTempSelected","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/hrithikarora/Documents/SMU/Assignment/FIRST/my-app/src/components/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport cold from '../image/cold.png';\nimport mild from '../image/mild.png';\nimport sunny from '../image/sunny.png';\nimport c from '../image/c.png';\nimport f from '../image/f.png';\n\n\nimport './Weather.css'; // Import the CSS file\n\nexport const Weather = () => {\n  const [temperature, setTemperature] = useState(null);\n  const [ftemperature, setFtemperature] = useState(null);\n  const [weatherImage, setWeatherImage] = useState(null);\n  const [isTemperatureSelected, setIsTemperatureSelected] = useState(true); // Added state to track which temperature is selected\n\n  useEffect(() => {\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=Halifax,Canada&APPID=c70084a5e8a2058ce8a54ff0f61a4afe&units=metric')\n      .then((response) => response.json())\n      .then((data) => {\n        const temp = data.main.temp;\n        setTemperature(temp);\n\n        const fTemp = temp * 1.8 + 32;\n        setFtemperature(fTemp);\n\n        if (temp < 10) {\n          setWeatherImage(cold);\n        } else if (temp > 10 && temp < 20) {\n          setWeatherImage(mild);\n        } else {\n          setWeatherImage(sunny);\n        }\n      });\n  }, []);\n\n  const handleImageClick = (isTempSelected) => {\n    setIsTemperatureSelected(isTempSelected);\n  };\n\n  return (\n    <div className=\"weather-container\">\n      {weatherImage && <img src={weatherImage} alt=\"Weather\" className=\"weather-image\" />}\n      {isTemperatureSelected ? (\n        <p className=\"temperature\">{temperature}°C</p>\n      ) : (\n        <p className=\"temperature\">{ftemperature}°F</p>\n      )}\n\n      {/* Image buttons to toggle between temperature and ftemperature */}\n      <div className=\"image-buttons\">\n        <img\n          src={c} // You can use the same image as a button or use different images for toggling\n          className=\"celsius-image\"\n          onClick={() => handleImageClick(true)}\n        />\n        <img\n          src={f} // You can use the same image as a button or use different images for toggling\n          alt=\"Fahrenheit Temperature\"\n          onClick={() => handleImageClick(false)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}